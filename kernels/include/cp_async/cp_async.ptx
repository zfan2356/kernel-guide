//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-36037853
// Cuda compilation tools, release 12.9, V12.9.86
// Based on NVVM 7.0.1
//

.version 8.8
.target sm_90a
.address_size 64

	// .globl	_ZN7kernels7cpasync13cp_async_implILj70ELj4ELj8192ELj8192ELj16ELj16EEEvP13__nv_bfloat16S3_
// _ZZN7kernels7cpasync13cp_async_implILj70ELj4ELj8192ELj8192ELj16ELj16EEEvP13__nv_bfloat16S3_E6smem_x has been demoted
.global .align 1 .b8 _ZN47_INTERNAL_792d3a02_9_kernel_cu_735e80f8_20629854cuda3std3__45__cpo5beginE[1];
.global .align 1 .b8 _ZN47_INTERNAL_792d3a02_9_kernel_cu_735e80f8_20629854cuda3std3__45__cpo3endE[1];
.global .align 1 .b8 _ZN47_INTERNAL_792d3a02_9_kernel_cu_735e80f8_20629854cuda3std3__45__cpo6cbeginE[1];
.global .align 1 .b8 _ZN47_INTERNAL_792d3a02_9_kernel_cu_735e80f8_20629854cuda3std3__45__cpo4cendE[1];
.global .align 1 .b8 _ZN47_INTERNAL_792d3a02_9_kernel_cu_735e80f8_20629854cuda3std3__449_GLOBAL__N__792d3a02_9_kernel_cu_735e80f8_20629856ignoreE[1];
.global .align 1 .b8 _ZN47_INTERNAL_792d3a02_9_kernel_cu_735e80f8_20629854cuda3std3__419piecewise_constructE[1];
.global .align 1 .b8 _ZN47_INTERNAL_792d3a02_9_kernel_cu_735e80f8_20629854cuda3std3__48in_placeE[1];
.global .align 1 .b8 _ZN47_INTERNAL_792d3a02_9_kernel_cu_735e80f8_20629854cuda3std6ranges3__45__cpo4swapE[1];
.global .align 1 .b8 _ZN47_INTERNAL_792d3a02_9_kernel_cu_735e80f8_20629854cuda3std6ranges3__45__cpo9iter_moveE[1];

.visible .entry _ZN7kernels7cpasync13cp_async_implILj70ELj4ELj8192ELj8192ELj16ELj16EEEvP13__nv_bfloat16S3_(
	.param .u64 _ZN7kernels7cpasync13cp_async_implILj70ELj4ELj8192ELj8192ELj16ELj16EEEvP13__nv_bfloat16S3__param_0,
	.param .u64 _ZN7kernels7cpasync13cp_async_implILj70ELj4ELj8192ELj8192ELj16ELj16EEEvP13__nv_bfloat16S3__param_1
)
.maxntid 128, 1, 1
.minnctapersm 1
{
	.reg .pred 	%p<18>;
	.reg .b16 	%rs<17>;
	.reg .b32 	%r<158>;
	.reg .b64 	%rd<9>;
	// demoted variable
	.shared .align 4 .b8 _ZZN7kernels7cpasync13cp_async_implILj70ELj4ELj8192ELj8192ELj16ELj16EEEvP13__nv_bfloat16S3_E6smem_x[4096];

	ld.param.u64 	%rd1, [_ZN7kernels7cpasync13cp_async_implILj70ELj4ELj8192ELj8192ELj16ELj16EEEvP13__nv_bfloat16S3__param_0];
	ld.param.u64 	%rd2, [_ZN7kernels7cpasync13cp_async_implILj70ELj4ELj8192ELj8192ELj16ELj16EEEvP13__nv_bfloat16S3__param_1];
	mov.u32 	%r25, %ctaid.x;
	shl.b32 	%r26, %r25, 2;
	mov.u32 	%r27, %tid.x;
	shr.u32 	%r28, %r27, 5;
	mov.u32 	%r29, 31;
	mov.u32 	%r152, 0;
	mov.u32 	%r31, -1;
	shfl.sync.idx.b32 	%r32|%p2, %r28, %r152, %r29, %r31;
	add.s32 	%r153, %r32, %r26;
	setp.gt.u32 	%p3, %r153, 262143;
	@%p3 bra 	$L__BB0_15;

	mov.pred 	%p17, 0;
	// begin inline asm
	mov.u32 %r34, %laneid;
	// end inline asm
	shl.b32 	%r5, %r34, 2;

$L__BB0_2:
	and.b32  	%r4, %r153, 511;
	@%p17 bra 	$L__BB0_7;

	setp.gt.u32 	%p5, %r5, 127;
	@%p5 bra 	$L__BB0_6;

	shl.b32 	%r6, %r4, 4;
	add.s32 	%r155, %r5, -128;
	shl.b32 	%r35, %r152, 11;
	mov.u32 	%r36, _ZZN7kernels7cpasync13cp_async_implILj70ELj4ELj8192ELj8192ELj16ELj16EEEvP13__nv_bfloat16S3_E6smem_x;
	add.s32 	%r37, %r36, %r35;
	shl.b32 	%r38, %r5, 2;
	add.s32 	%r154, %r37, %r38;

$L__BB0_5:
	add.s32 	%r155, %r155, 128;
	shr.u32 	%r40, %r155, 3;
	shl.b32 	%r41, %r155, 1;
	and.b32  	%r42, %r41, 8;
	shr.u32 	%r43, %r153, 5;
	and.b32  	%r44, %r43, 524272;
	add.s32 	%r45, %r40, %r44;
	add.s32 	%r46, %r42, %r6;
	shl.b32 	%r47, %r45, 13;
	add.s32 	%r48, %r46, %r47;
	mov.u32 	%r51, 31;
	mov.u32 	%r52, 0;
	mov.u32 	%r53, -1;
	shfl.sync.idx.b32 	%r54|%p6, %r28, %r52, %r51, %r53;
	mul.wide.u32 	%rd4, %r48, 2;
	add.s64 	%rd3, %rd1, %rd4;
	shl.b32 	%r55, %r54, 9;
	add.s32 	%r39, %r154, %r55;
	// begin inline asm
	cp.async.cg.shared.global [%r39], [%rd3], 16;

	// end inline asm
	add.s32 	%r154, %r154, 512;
	setp.gt.u32 	%p7, %r155, -129;
	@%p7 bra 	$L__BB0_5;

$L__BB0_6:
	// begin inline asm
	cp.async.commit_group ;
	// end inline asm

$L__BB0_7:
	// begin inline asm
	cp.async.wait_all ;
	// end inline asm
	add.s32 	%r13, %r153, 280;
	setp.gt.u32 	%p8, %r13, 262143;
	@%p8 bra 	$L__BB0_11;

	shl.b32 	%r156, %r34, 2;
	setp.gt.u32 	%p9, %r156, 127;
	@%p9 bra 	$L__BB0_10;

$L__BB0_9:
	shl.b32 	%r59, %r156, 1;
	and.b32  	%r60, %r59, 8;
	shr.u32 	%r61, %r13, 5;
	and.b32  	%r62, %r61, 524272;
	shr.u32 	%r63, %r156, 3;
	add.s32 	%r64, %r63, %r62;
	shl.b32 	%r65, %r13, 4;
	and.b32  	%r66, %r65, 8176;
	or.b32  	%r67, %r60, %r66;
	shl.b32 	%r68, %r64, 13;
	or.b32  	%r69, %r67, %r68;
	mov.u32 	%r70, 31;
	mov.u32 	%r71, 0;
	mov.u32 	%r72, -1;
	shfl.sync.idx.b32 	%r73|%p10, %r28, %r71, %r70, %r72;
	mul.wide.u32 	%rd6, %r69, 2;
	add.s64 	%rd5, %rd1, %rd6;
	shl.b32 	%r74, %r73, 9;
	shl.b32 	%r75, %r152, 11;
	not.b32 	%r76, %r75;
	and.b32  	%r77, %r76, 2048;
	mov.u32 	%r78, _ZZN7kernels7cpasync13cp_async_implILj70ELj4ELj8192ELj8192ELj16ELj16EEEvP13__nv_bfloat16S3_E6smem_x;
	add.s32 	%r79, %r78, %r77;
	add.s32 	%r80, %r79, %r74;
	shl.b32 	%r81, %r156, 2;
	add.s32 	%r58, %r80, %r81;
	// begin inline asm
	cp.async.cg.shared.global [%r58], [%rd5], 16;

	// end inline asm
	add.s32 	%r17, %r156, 128;
	setp.gt.u32 	%p11, %r156, -129;
	mov.u32 	%r156, %r17;
	@%p11 bra 	$L__BB0_9;

$L__BB0_10:
	// begin inline asm
	cp.async.commit_group ;
	// end inline asm

$L__BB0_11:
	setp.gt.u32 	%p12, %r5, 127;
	@%p12 bra 	$L__BB0_14;

	shr.u32 	%r83, %r153, 5;
	and.b32  	%r19, %r83, 134217712;
	shl.b32 	%r20, %r4, 4;
	mov.u32 	%r157, %r5;

$L__BB0_13:
	mov.u32 	%r134, 31;
	mov.u32 	%r135, 0;
	mov.u32 	%r136, -1;
	shfl.sync.idx.b32 	%r137|%p13, %r28, %r135, %r134, %r136;
	shl.b32 	%r138, %r137, 9;
	shl.b32 	%r139, %r152, 11;
	mov.u32 	%r140, _ZZN7kernels7cpasync13cp_async_implILj70ELj4ELj8192ELj8192ELj16ELj16EEEvP13__nv_bfloat16S3_E6smem_x;
	add.s32 	%r141, %r140, %r139;
	add.s32 	%r142, %r141, %r138;
	shl.b32 	%r143, %r157, 2;
	add.s32 	%r89, %r142, %r143;
	mov.u32 	%r121, 2;
	// begin inline asm
	ld.shared.v4.b32 {%r85, %r86, %r87, %r88}, [%r89];

	// end inline asm
	mov.u32 	%r126, 1;
	// begin inline asm
	cvt.rn.bf16.s32 %rs2, %r121;
	// end inline asm
	// begin inline asm
	cvt.rn.bf16.s32 %rs1, %r121;
	// end inline asm
	mov.b32 	%r94, {%rs1, %rs2};
	// begin inline asm
	{ mul.bf16x2 %r92,%r85,%r94; }

	// end inline asm
	// begin inline asm
	cvt.rn.bf16.s32 %rs4, %r126;
	// end inline asm
	// begin inline asm
	cvt.rn.bf16.s32 %rs3, %r126;
	// end inline asm
	mov.b32 	%r99, {%rs3, %rs4};
	// begin inline asm
	{ add.bf16x2 %r97,%r92,%r99; }

	// end inline asm
	// begin inline asm
	cvt.rn.bf16.s32 %rs6, %r121;
	// end inline asm
	// begin inline asm
	cvt.rn.bf16.s32 %rs5, %r121;
	// end inline asm
	mov.b32 	%r104, {%rs5, %rs6};
	// begin inline asm
	{ mul.bf16x2 %r102,%r86,%r104; }

	// end inline asm
	// begin inline asm
	cvt.rn.bf16.s32 %rs8, %r126;
	// end inline asm
	// begin inline asm
	cvt.rn.bf16.s32 %rs7, %r126;
	// end inline asm
	mov.b32 	%r109, {%rs7, %rs8};
	// begin inline asm
	{ add.bf16x2 %r107,%r102,%r109; }

	// end inline asm
	// begin inline asm
	cvt.rn.bf16.s32 %rs10, %r121;
	// end inline asm
	// begin inline asm
	cvt.rn.bf16.s32 %rs9, %r121;
	// end inline asm
	mov.b32 	%r114, {%rs9, %rs10};
	// begin inline asm
	{ mul.bf16x2 %r112,%r87,%r114; }

	// end inline asm
	// begin inline asm
	cvt.rn.bf16.s32 %rs12, %r126;
	// end inline asm
	// begin inline asm
	cvt.rn.bf16.s32 %rs11, %r126;
	// end inline asm
	mov.b32 	%r119, {%rs11, %rs12};
	// begin inline asm
	{ add.bf16x2 %r117,%r112,%r119; }

	// end inline asm
	// begin inline asm
	cvt.rn.bf16.s32 %rs14, %r121;
	// end inline asm
	// begin inline asm
	cvt.rn.bf16.s32 %rs13, %r121;
	// end inline asm
	mov.b32 	%r124, {%rs13, %rs14};
	// begin inline asm
	{ mul.bf16x2 %r122,%r88,%r124; }

	// end inline asm
	// begin inline asm
	cvt.rn.bf16.s32 %rs16, %r126;
	// end inline asm
	// begin inline asm
	cvt.rn.bf16.s32 %rs15, %r126;
	// end inline asm
	mov.b32 	%r129, {%rs15, %rs16};
	// begin inline asm
	{ add.bf16x2 %r127,%r122,%r129; }

	// end inline asm
	shl.b32 	%r144, %r157, 1;
	and.b32  	%r145, %r144, 8;
	shr.u32 	%r146, %r157, 3;
	add.s32 	%r147, %r146, %r19;
	add.s32 	%r148, %r145, %r20;
	shl.b32 	%r149, %r147, 13;
	add.s32 	%r150, %r148, %r149;
	mul.wide.u32 	%rd8, %r150, 2;
	add.s64 	%rd7, %rd2, %rd8;
	// begin inline asm
	st.weak.global.cs.v4.b32 [%rd7], {%r97, %r107, %r117, %r127};
	// end inline asm
	add.s32 	%r23, %r157, 128;
	setp.gt.u32 	%p14, %r157, -129;
	mov.u32 	%r157, %r23;
	@%p14 bra 	$L__BB0_13;

$L__BB0_14:
	setp.lt.u32 	%p16, %r13, 262144;
	not.b32 	%r151, %r152;
	and.b32  	%r152, %r151, 1;
	mov.pred 	%p17, -1;
	mov.u32 	%r153, %r13;
	@%p16 bra 	$L__BB0_2;

$L__BB0_15:
	ret;

}
